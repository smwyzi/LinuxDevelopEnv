import os
import logging
import ycm_core
import re
import traceback

BASE_FLAGS = [
    '-x',
    'c++',
    '-std=c++11',
    '-Wall',
    # '-Wextra',
    # '-Werror',
    # '-D_GNU_SOURCE',
    '-isystem',
    os.environ.get('HOME') + '/.vim/plugged/YouCompleteMe/third_party/ycmd/third_party/clang/lib/clang/7.0.0/include',

    # `/opt/compiler/gcc-4.8.2/bin/gcc -print-prog-name=cc1plus` -v
    '-isystem',
    '/opt/compiler/gcc-4.8.2/include/c++/4.8.2',
    '-isystem',
    '/opt/compiler/gcc-4.8.2/include/c++/4.8.2/x86_64-baidu-linux-gnu',
    '-isystem',
    '/opt/compiler/gcc-4.8.2/include/c++/4.8.2/backward',

    '-isystem',
    '/opt/compiler/gcc-4.8.2/lib/gcc/x86_64-baidu-linux-gnu/4.8.2/include',
    '-isystem',
    '/opt/compiler/gcc-4.8.2/lib/gcc/x86_64-baidu-linux-gnu/4.8.2/include-fixed',

    '-isystem',
    '/opt/compiler/gcc-4.8.2/x86_64-baidu-linux-gnu/sys-root/include',

    '-isystem',
    '/usr/include',
    '-isystem',
    '/usr/local/include',
]


def FindNearest(path, target):
    candidate = os.path.join(path, target)
    if(os.path.isfile(candidate) or os.path.isdir(candidate)):
        logging.info("Found nearest " + target + " at " + candidate)
        return candidate;
    else:
        parent = os.path.dirname(os.path.abspath(path));
        if(parent == path):
            raise RuntimeError("Could not find " + target);
        return FindNearest(parent, target)

def MakeRelativePathsInFlagsAbsolute(flags, working_directory):
    if not working_directory:
        return list(flags)
    new_flags = []
    make_next_absolute = False
    path_flags = [ '-isystem', '-I', '-iquote', '--sysroot=' ]
    for flag in flags:
        new_flag = flag
        if make_next_absolute:
            make_next_absolute = False
            if not flag.startswith('/'):
                new_flag = os.path.join(working_directory, flag)
        for path_flag in path_flags:
            if flag == path_flag:
                make_next_absolute = True

            if flag.startswith(path_flag):
                path = flag[ len(path_flag): ]
                new_flag = path_flag + os.path.join(working_directory, path)
                break
        if new_flag:
            new_flags.append(new_flag)
    return new_flags

# for COMAKE
def FlagsForMakefile(root):
    try:
        makefile = FindNearest(root, 'Makefile')
        inc_pattern = re.compile(r'^INCPATH=(\S+(?:\s+\\\n\s+\S+)*)', re.M)
        dep_pattern = re.compile(r'^DEP_INCPATH=(\S+(?:\s+\\\n\s+\S+)*)', re.M)
        with open(makefile, 'r') as f:
            content = f.read()
            def FlagsForPattern(pattern):
                match = pattern.search(content)
                if match:
                    path_str = match.group(1)
                    path_list = [i.strip() for i in path_str.split('\\\n')]
                    return path_list
                else:
                    return []
            inc_path = FlagsForPattern(inc_pattern)
            dep_path = FlagsForPattern(dep_pattern)
            flags = inc_path + dep_path
            logging.info("Found Makefile flags: %s", flags)
            return MakeRelativePathsInFlagsAbsolute(flags, os.path.dirname(makefile))
    except:
        return []

def CustomFlags():
    current_path=os.path.dirname(os.path.realpath(__file__))
    current_path += "/tera"
    flags = []
    flags.append("-I" + current_path)
    flags.append("-I" + current_path + "/include")
    flags.append("-I" + current_path + "/src")
    flags.append("-I" + current_path + "/src/leveldb")
    flags.append("-I" + current_path + "/src/leveldb/include")
    return flags

gen_source_dirs=["tera/src"]
# for BCLOUD
def FlagsForBcloud():
    try:
        current_path=os.path.dirname(os.path.realpath(__file__))
        flags = []
        def _find_scm_file():
            import glob
            files = glob.glob(current_path + "/.*BCLOUD.CONFIGS.SCM")
            logging.info("glob scm configs file in path:%s, result:%s", current_path, files)
            if not files:
                return None
            return files[0]
        configs_scm_file = _find_scm_file()
        if not configs_scm_file:
            return flags
        logging.info("found configs scm file: %s", configs_scm_file)
        depends = []
        current_module = ""
        with open(configs_scm_file, "r") as f:
            for line in f:
                line = line.strip()
                if not line or line.startswith("#"):
                    continue
                parts = line.split(",")
                # current module
                if len(parts) == 5:
                    current_module = parts[0]
                    continue
                if len(parts) != 9:
                    continue
                # depends module
                if parts[0] != 'None':
                    depends.append(parts[0])
                elif parts[1] != 'None':
                    depends.append(parts[1])
            logging.info("found depends module: %s", depends)
        def _find_workroot_path():
            bcloud_path = current_path + "/BCLOUD"
            pattern = re.compile(r'WORKROOT\(\s*[\'"]\s*(\S*)\s*[\'"]\s*\)')
            if not os.path.exists(bcloud_path):
                logging.warning("bcloud path: %s not exists", bcloud_path)
                return None
            with open(bcloud_path, "r") as f:
                for line in f:
                    line = line.strip()
                    if not line or line.startswith("#"):
                        continue
                    match = pattern.match(line)
                    if match:
                        workroot_path = match.group(1)
                        if workroot_path.startswith("../"):
                            workroot_path = os.path.realpath(current_path + "/" + workroot_path)
                        return workroot_path
                return None
        workroot = _find_workroot_path()
        if not workroot:
            return flags
        logging.info("found work root path: %s", workroot)
        # current module output
        current_module_bc_out = workroot + "/bc_out/" + current_module
        flags.append("-I" + current_module_bc_out + "/output/include")
        for dir_path in gen_source_dirs:
            flags.append("-I" + current_module_bc_out + "/" + dir_path)
        # bc_out/baidu/third-party/tera-gflags/output/include/
        for depend in depends:
            depend_path = workroot + "/bc_out/" + depend + "/output/include"
            flags.append("-I" + depend_path)
        logging.info("found depend path from bcloud file. result: %s", flags)
        return flags
    except Exception as e:
        traceback.print_exc(e)
        return []


def FlagsForFile(filename, **kwargs):
    root = os.path.realpath(filename)
    final_flags = BASE_FLAGS
    final_flags += CustomFlags()
    final_flags += FlagsForMakefile(root)
    final_flags += FlagsForBcloud()
    return {
        'flags': final_flags,
        'do_cache': True
    }

